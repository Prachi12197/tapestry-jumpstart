<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- We need a doctype to allow us to use special characters like &nbsp; 
	 We use a "strict" DTD to make IE follow the alignment rules. -->
	 
<html xmlns:t="http://tapestry.apache.org/schema/tapestry_5_3.xsd">
<head>
	<link rel="stylesheet" type="text/css" href="${context:css/examples/examples.css}"/>
</head>
<body>
	<h1>Action Links</h1>
	
	<strong>ActionLink</strong> is very like EventLink and 
	<a href="http://tapestry.1045711.n5.nabble.com/What-ist-the-advantage-of-ActionLink-compared-to-EventLink-td2419735.html">
	probably not needed any more</a>, but 
	<a href="http://tapestry.1045711.n5.nabble.com/EventLInk-vs-ActionLink-td3390203.html">ActionLink is still supported</a>, so here we go...<br/><br/>
	
	Clicking on an <strong>ActionLink</strong> sends a <strong>component event request</strong> that asks its server-side 
	counterpart to "bubble" up the event <em>action</em>.<br/>
	Here is an example with 3 ActionLinks:<br/>
		
	<div class="eg"> 
		Count = ${count}. <br/>
		<a t:type="actionlink" t:id="addX" t:context="literal:1" href="#">Add 1</a><br/> 
		<a t:type="actionlink" t:id="addY" t:context="literal:2" href="#">Add 2</a><br/>  
		<a t:type="actionlink" t:id="clear" href="#">Clear</a>
	</div>	  

	Their requests are sent as HTTP GETs and they look like this:<br/><br/>
	 
	<code>http://myhost/jumpstart/examples/input/actionlinks:addx/1?t:ac=n</code><br/>
	<code>http://myhost/jumpstart/examples/input/actionlinks:addy/2?t:ac=n</code><br/>
	<code>http://myhost/jumpstart/examples/input/actionlinks:clear?t:ac=n</code><br/><br/>

	The server-side ActionLink "bubbles up" the event <em>action</em>, which we handle with <em>onActionFromAddX()</em>, etc.<br/>
	The handlers return void which means stay on this page. There are alternatives that we will show later.<br/><br/>

	Now, what happens next may surprise you. Tapestry does not then render the page and return it. Why not? Because Tapestry 
	uses the <a href="http://en.wikipedia.org/wiki/Post/Redirect/Get">Post/Redirect/Get</a> pattern: it generates a 
	<strong>page render request</strong> URL to the next page and returns it to the browser as a redirect, an 
	<a href="http://en.wikipedia.org/wiki/HTTP_302">HTTP 302</a>. So when the next page shows, its URL will NOT be the URL 
	that triggered the event.  Instead, it will be a URL that is safe to reload, or bookmark, or return to with the Back button. 
	The cost is 2 trips to the server, but it's worth it.<br/><br/>
	
	Actually, clicking on an ActionLink link sends a GET, not a POST, so it's actually a Get/Redirect/Get!<br/><br/> 
	
	Why do we have an <em>onPassivate()</em> method? Well, for Tapestry to generate a <em>page render request</em> (see above) 
	it needs the page's activation context. It gets it by triggering the <em>passivate</em> event on the page and it expects 
	the <em>passivate</em> event handler to return the activation context, which our <em>onPassivate()</em> does.<br/><br/>

	References:	
	<a href="http://tapestry.apache.org/5.3.7/apidocs/org/apache/tapestry5/corelib/components/ActionLink.html">ActionLink</a>, 
	<a href="http://tapestry.apache.org/page-navigation.html">Page Navigation</a>, 
	<a href="http://tapestry.apache.org/component-events.html">Component Events</a>.<br/><br/>

	<a t:type="pagelink" t:page="Index" href="#">Home</a><br/><br/>

	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/pages/examples/input/ActionLinks.tml"/>
	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/pages/examples/input/ActionLinks.java"/>
	<t:sourcecodedisplay src="/web/src/main/java/jumpstart/web/css/examples/examples.css"/>
</body>
</html>