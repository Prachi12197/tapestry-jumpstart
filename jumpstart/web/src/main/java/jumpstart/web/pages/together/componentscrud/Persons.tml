<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- We need a doctype to allow us to use special characters like &nbsp; 
	 We use a "strict" DTD to make IE follow the alignment rules. -->
	 
<html xmlns:t="http://tapestry.apache.org/schema/tapestry_5_4.xsd" xmlns:p="tapestry:parameter">
<body class="container">
	<h1>Components CRUD</h1>
	
	This example is based on the <em>Filter CRUD</em> example, replacing the list and the editor with two custom components: 
	PersonList and PersonEditorForm.<br/>

	<div class="eg">
	 	<a t:type="eventLink" t:event="toCreate" href="#">Create...</a><br/>
	 	
		<table id="listAndEditor">
			<tbody>
				<tr>
	
					<!-- This is the left side of the table: a list of Persons -->
	
					<td id="listSide">
						<t:together.componentscrud.PersonList t:id="list" partialName="partialName" selectedPersonId="listPersonId"/>
					</td>
					
					<!-- This is the right side of the table: where a Person will be created, reviewed, updated, or deleted. -->
			
					<td id="editorSide">
						<t:together.componentscrud.PersonEditorForm t:id="editor" mode="editorMode" personId="editorPersonId"/>
					</td>
					
				</tr>
			</tbody>
	 	</table>
	</div>

	Like all good components, PersonList and PersonEditorForm do not know about each other. They handle their own events, 
	then bubble them up to their container which is, in this case, the page. The container is responsible for coordinating its components. 
	For example, when you click on a person in the list, PersonList bubbles the SELECTED event up to the page, and the page sets 
	editorMode = REVIEW, and editorPersonId = the selected id, so that on redisplay the PersonEditorForm will show that person for review.<br/><br/>
	 
	A component can include data within an event that it bubbles up, which is what PersonList and PersonEditorForm do, but take note that a 
	component can also return data in its parameters - the container can read the data because component parameters are bi-directional.<br/><br/>

	Splitting the page into custom components like PersonList and PersonEditorForm is very appealing because it provides a clear and very 
	natural separation of concerns, but just be aware that it doesn't come for free: you have to put in a bit of extra effort to get 
	the event handling right.<br/><br/>

 	References: 
 	<a href="http://people.apache.org/~hlship/t5api/apidocs/org/apache/tapestry5/ComponentResourcesCommon.html">ComponentResourcesCommon</a>, 
 	<a href="http://people.apache.org/~hlship/t5api/apidocs/org/apache/tapestry5/annotations/ActivationRequestParameter.html">@ActivationRequestParameter</a>.<br/><br/>

	<t:pagelink page="Index">Home</t:pagelink><br/><br/>
	
	The source for IPersonFinderServiceLocal and @EJB is shown in the Session Beans and @EJB examples.<br/><br/>
    <t:tabgroup>
        <t:sourcecodetab src="/web/src/main/java/jumpstart/web/pages/together/componentscrud/Persons.tml"/>
		<t:sourcecodetab src="/web/src/main/java/jumpstart/web/pages/together/componentscrud/Persons.java"/>
		<t:sourcecodetab src="/web/src/main/java/jumpstart/web/components/together/componentscrud/PersonList.tml"/>
		<t:sourcecodetab src="/web/src/main/java/jumpstart/web/components/together/componentscrud/PersonList.java"/>
		<t:sourcecodetab src="/web/src/main/java/jumpstart/web/components/together/componentscrud/PersonEditorForm.tml"/>
		<t:sourcecodetab src="/web/src/main/java/jumpstart/web/components/together/componentscrud/PersonEditorForm.properties"/>
		<t:sourcecodetab src="/web/src/main/java/jumpstart/web/components/together/componentscrud/PersonEditorForm.java"/>
		<t:sourcecodetab src="/web/src/main/resources/META-INF/assets/css/together/filtercrud.css"/>
		<t:sourcecodetab src="/web/src/main/java/jumpstart/web/models/together/PersonFilteredDataSource.java"/>
		<t:sourcecodetab src="/business/src/main/java/jumpstart/business/domain/person/Person.java"/>
		<t:sourcecodetab src="/business/src/main/java/jumpstart/business/domain/person/Regions.java"/>
	</t:tabgroup>
</body>
</html>